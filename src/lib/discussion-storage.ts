/**
 * 議論内容の永続化保存とテキスト出力機能
 */

export interface SavedMessage {
  id: string;
  agent: string;
  message: string;
  timestamp: Date;
  tokens?: number;
}

export interface SavedDiscussion {
  id: string;
  topic: string;
  agents: string[];
  thinkingMode: string;
  messages: SavedMessage[];
  startTime: Date;
  endTime?: Date;
  duration: number; // 分単位
  costInfo: {
    totalCostJPY: number;
    model: string;
    totalTokens: number;
  };
  summary?: {
    consensus: string;
    keyDecisions: string[];
    actionItems: string[];
    risks: string[];
    agentSummaries: AgentSummary[];
  };
}

export interface AgentSummary {
  agent: string;
  keyPoints: string[];
  messageCount: number;
  averageMessageLength: number;
  expertise: string[];
}

export class DiscussionStorageManager {
  private storageKey = 'hexamind-discussions';

  /**
   * 議論を保存
   */
  saveDiscussion(discussion: SavedDiscussion): void {
    try {
      const existingDiscussions = this.getAllDiscussions();
      const updatedDiscussions = [discussion, ...existingDiscussions.slice(0, 49)]; // 最大50件保存
      
      localStorage.setItem(this.storageKey, JSON.stringify(updatedDiscussions, this.dateReplacer));
      console.log(`[Storage] 議論を保存しました: ${discussion.id}`);
    } catch (error) {
      console.error('議論の保存に失敗:', error);
    }
  }

  /**
   * すべての議論を取得
   */
  getAllDiscussions(): SavedDiscussion[] {
    try {
      const data = localStorage.getItem(this.storageKey);
      if (!data) return [];
      
      return JSON.parse(data, this.dateReviver);
    } catch (error) {
      console.error('議論の読み込みに失敗:', error);
      return [];
    }
  }

  /**
   * 特定の議論を取得
   */
  getDiscussion(id: string): SavedDiscussion | null {
    const discussions = this.getAllDiscussions();
    return discussions.find(d => d.id === id) || null;
  }

  /**
   * 議論を削除
   */
  deleteDiscussion(id: string): void {
    try {
      const discussions = this.getAllDiscussions().filter(d => d.id !== id);
      localStorage.setItem(this.storageKey, JSON.stringify(discussions, this.dateReplacer));
    } catch (error) {
      console.error('議論の削除に失敗:', error);
    }
  }

  /**
   * 概要版テキストを生成
   */
  generateSummaryText(discussion: SavedDiscussion): string {
    const { topic, agents, duration, costInfo, messages } = discussion;
    
    // 各エージェントの主要論点を抽出
    const agentSummaries = this.extractAgentKeyPoints(messages);
    
    // 議論総括を取得
    const finalSummary = messages.find(msg => msg.agent === '議論総括');
    
    return `# 議論サマリー

## 基本情報
- **議題**: ${topic}
- **参加者**: ${agents.join('、')}
- **実行時間**: ${duration}分
- **コスト**: ¥${costInfo.totalCostJPY.toFixed(1)} (${costInfo.model})
- **総発言数**: ${messages.length}件

## 各エージェントの主要論点

${agentSummaries.map(summary => 
`### ${summary.agent} (${summary.messageCount}回発言)
${summary.keyPoints.map(point => `- ${point}`).join('\n')}`
).join('\n\n')}

## 議論の結論

${finalSummary ? finalSummary.message : '議論の総括が生成されませんでした。'}

---
*Generated by HexaMind AI on ${new Date().toLocaleString('ja-JP')}*`;
  }

  /**
   * 詳細版テキストを生成
   */
  generateDetailedText(discussion: SavedDiscussion): string {
    const { topic, agents, duration, costInfo, messages, startTime } = discussion;
    
    return `# 詳細議事録

## 議論概要
- **議題**: ${topic}
- **開始時刻**: ${startTime.toLocaleString('ja-JP')}
- **実行時間**: ${duration}分
- **参加エージェント**: ${agents.join('、')}
- **思考モード**: ${discussion.thinkingMode}
- **使用モデル**: ${costInfo.model}
- **総コスト**: ¥${costInfo.totalCostJPY.toFixed(1)}
- **総トークン数**: ${costInfo.totalTokens.toLocaleString()}

## 詳細な議論内容

${messages.map((msg, index) => {
  const timeFromStart = Math.round((msg.timestamp.getTime() - startTime.getTime()) / 1000 / 60);
  return `### ${index + 1}. ${msg.agent} (開始から${timeFromStart}分後)
**発言時刻**: ${msg.timestamp.toLocaleString('ja-JP')}

${msg.message}

---`;
}).join('\n\n')}

## 統計情報

### エージェント別発言統計
${this.extractAgentKeyPoints(messages).map(summary => 
`- **${summary.agent}**: ${summary.messageCount}回発言、平均${summary.averageMessageLength}文字`
).join('\n')}

### 議論の特徴
- **最も活発な参加者**: ${this.getMostActiveAgent(messages)}
- **最長発言**: ${this.getLongestMessage(messages)} (${this.getLongestMessageAgent(messages)})
- **キーワード頻出度**: ${this.getKeywordFrequency(messages)}

---
*Detailed Report Generated by HexaMind AI on ${new Date().toLocaleString('ja-JP')}*`;
  }

  /**
   * エージェントの要点を抽出
   */
  private extractAgentKeyPoints(messages: SavedMessage[]): AgentSummary[] {
    const agentMap = new Map<string, SavedMessage[]>();
    
    // エージェント別にメッセージをグループ化
    messages.forEach(msg => {
      if (msg.agent !== '議論総括') {
        if (!agentMap.has(msg.agent)) {
          agentMap.set(msg.agent, []);
        }
        agentMap.get(msg.agent)!.push(msg);
      }
    });

    const summaries: AgentSummary[] = [];
    
    agentMap.forEach((msgs, agent) => {
      const keyPoints: string[] = [];
      let totalLength = 0;

      msgs.forEach(msg => {
        totalLength += msg.message.length;
        
        // 重要な文を抽出
        const sentences = msg.message.split(/[。！？]/).filter(s => s.trim().length > 20);
        sentences.forEach(sentence => {
          const trimmed = sentence.trim();
          if (
            trimmed.includes('重要') || trimmed.includes('必要') ||
            trimmed.includes('提案') || trimmed.includes('推奨') ||
            trimmed.includes('リスク') || trimmed.includes('機会') ||
            trimmed.includes('%') || trimmed.includes('円') ||
            trimmed.includes('$') || trimmed.includes('億') ||
            trimmed.includes('ROI') || trimmed.includes('NPV')
          ) {
            keyPoints.push(trimmed);
          }
        });
      });

      summaries.push({
        agent,
        keyPoints: Array.from(new Set(keyPoints)).slice(0, 5),
        messageCount: msgs.length,
        averageMessageLength: Math.round(totalLength / msgs.length),
        expertise: this.inferExpertise(agent)
      });
    });

    return summaries;
  }

  /**
   * エージェントの専門分野を推定
   */
  private inferExpertise(agent: string): string[] {
    const expertiseMap: Record<string, string[]> = {
      'CEO AI': ['戦略企画', '経営判断', 'リーダーシップ'],
      'CFO AI': ['財務分析', '投資評価', 'リスク管理'],
      'CMO AI': ['マーケティング', 'ブランド戦略', '顧客分析'],
      'CTO AI': ['技術戦略', 'システム設計', 'イノベーション'],
      'COO AI': ['業務効率', 'プロセス改善', '実行管理'],
      '悪魔の代弁者': ['リスク分析', '批判的思考', '問題発見']
    };
    
    return expertiseMap[agent] || ['一般的な分析'];
  }

  /**
   * 最も活発な参加者を特定
   */
  private getMostActiveAgent(messages: SavedMessage[]): string {
    const agentCounts = new Map<string, number>();
    messages.forEach(msg => {
      if (msg.agent !== '議論総括') {
        agentCounts.set(msg.agent, (agentCounts.get(msg.agent) || 0) + 1);
      }
    });

    let maxCount = 0;
    let mostActive = '';
    agentCounts.forEach((count, agent) => {
      if (count > maxCount) {
        maxCount = count;
        mostActive = agent;
      }
    });

    return `${mostActive} (${maxCount}回発言)`;
  }

  /**
   * 最長発言の文字数を取得
   */
  private getLongestMessage(messages: SavedMessage[]): string {
    let maxLength = 0;
    messages.forEach(msg => {
      if (msg.message.length > maxLength) {
        maxLength = msg.message.length;
      }
    });
    return `${maxLength}文字`;
  }

  /**
   * 最長発言をしたエージェントを取得
   */
  private getLongestMessageAgent(messages: SavedMessage[]): string {
    let maxLength = 0;
    let agent = '';
    messages.forEach(msg => {
      if (msg.message.length > maxLength) {
        maxLength = msg.message.length;
        agent = msg.agent;
      }
    });
    return agent;
  }

  /**
   * キーワード頻出度を分析
   */
  private getKeywordFrequency(messages: SavedMessage[]): string {
    const keywords = ['戦略', '投資', 'リスク', '市場', '顧客', '技術', '収益'];
    const frequency = new Map<string, number>();
    
    const allText = messages.map(msg => msg.message).join(' ');
    keywords.forEach(keyword => {
      const count = (allText.match(new RegExp(keyword, 'g')) || []).length;
      if (count > 0) {
        frequency.set(keyword, count);
      }
    });

    const sorted = Array.from(frequency.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3);
    
    return sorted.map(([word, count]) => `${word}(${count}回)`).join(', ');
  }

  /**
   * Date型のシリアライゼーション用
   */
  private dateReplacer(key: string, value: any): any {
    if (value instanceof Date) {
      return { __type: 'Date', value: value.toISOString() };
    }
    return value;
  }

  /**
   * Date型のデシリアライゼーション用
   */
  private dateReviver(key: string, value: any): any {
    if (typeof value === 'object' && value !== null && value.__type === 'Date') {
      return new Date(value.value);
    }
    return value;
  }
}

/**
 * 議論の概要からサマリーを自動生成
 */
export function generateDiscussionSummary(messages: SavedMessage[]): {
  consensus: string;
  keyDecisions: string[];
  actionItems: string[];
  risks: string[];
} {
  const finalSummary = messages.find(msg => msg.agent === '議論総括');
  
  if (finalSummary) {
    // 総括メッセージから情報を抽出
    const content = finalSummary.message;
    
    const keyDecisions = extractListItems(content, ['合意', '決定', '方針']);
    const actionItems = extractListItems(content, ['アクション', '実行', 'フェーズ', '計画']);
    const risks = extractListItems(content, ['リスク', '懸念', '課題', '注意']);
    
    const consensus = extractConsensus(content);
    
    return { consensus, keyDecisions, actionItems, risks };
  }
  
  // 総括がない場合は、全メッセージから抽出
  const allContent = messages.map(msg => msg.message).join('\n');
  
  return {
    consensus: '議論は活発に行われましたが、明確な結論は記録されていません。',
    keyDecisions: extractListItems(allContent, ['決定', '合意']),
    actionItems: extractListItems(allContent, ['必要', '実行', '推奨']),
    risks: extractListItems(allContent, ['リスク', '懸念', '注意'])
  };
}

/**
 * テキストからリスト項目を抽出
 */
function extractListItems(content: string, keywords: string[]): string[] {
  const items: string[] = [];
  const sentences = content.split(/[。！？\n]/).map(s => s.trim()).filter(s => s.length > 10);
  
  sentences.forEach(sentence => {
    const hasKeyword = keywords.some(keyword => sentence.includes(keyword));
    if (hasKeyword) {
      // 箇条書きマーカーを除去
      const cleaned = sentence.replace(/^[-・●]\s*/, '').replace(/^\d+\.\s*/, '');
      if (cleaned.length > 5 && cleaned.length < 200) {
        items.push(cleaned);
      }
    }
  });
  
  return Array.from(new Set(items)).slice(0, 10);
}

/**
 * 総括部分を抽出
 */
function extractConsensus(content: string): string {
  const sections = content.split('\n\n');
  
  // 最初の実質的なパラグラフまたは「総括」を含む部分を探す
  for (const section of sections) {
    if (section.length > 50 && (
      section.includes('総括') || 
      section.includes('結論') || 
      section.includes('合意') ||
      section.length > 100
    )) {
      return section.trim().substring(0, 500);
    }
  }
  
  // 見つからない場合は最初の長いセクション
  const longSection = sections.find(s => s.length > 100);
  return longSection ? longSection.trim().substring(0, 500) : content.substring(0, 500);
}